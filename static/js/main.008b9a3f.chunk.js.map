{"version":3,"sources":["components/Todo/EditForm.tsx","components/Todo/Todo.tsx","components/TodoList.tsx","utils/generateKey.ts","types/FilterStatus.ts","components/Footer.tsx","utils/getSearchWith.ts","components/ToggleAllButton.tsx","context/ErrorContext.tsx","components/TodoContent.tsx","hooks/useLocalStorage.ts","components/ErrorNotification.tsx","App.tsx","index.tsx"],"names":["EditForm","onEditSubmit","todo","inputValue","setInputValue","inputRef","setIsTodoEditing","onKeyDownHandler","onSubmit","event","id","completed","className","type","value","onChange","target","ref","onBlur","onKeyDown","TodoComponent","isCurrentClicked","todos","visibleTodos","setVisibleTodos","clickedIndex","setClickedIndex","index","setTodos","useRef","useState","isTodoEditing","title","focusTimeout","useEffect","clearTimeout","data-cy","classNames","onDoubleClick","i","setTimeout","current","focus","hidden","defaultChecked","onClick","todoId","find","x","prev","map","el","currentTodo","updateCompletedStatus","todoCompleted","preventDefault","clickedTodoTitle","length","trim","blur","filter","nativeEvent","key","TodoList","pre","Date","getTime","generateKey","FilterStatus","Footer","useSearchParams","searchParams","setSearchParams","completedTodos","itemsLeft","filterType","useMemo","get","handleOnClick","currentSearchParams","params","Object","entries","forEach","delete","set","toString","selected","ToggleAllButton","isToggleAllActive","every","aria-label","active","ErrorContext","createContext","isEmptyTitleErrorShown","setIsEmptyTitleErrorShown","TodoContent","initialValue","window","JSON","parse","item","localStorage","getItem","error","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","useContext","newTodoField","Error","lastTodoId","newTodoObj","placeholder","ErrorNotification","isClosePressed","setIsClosePressed","isErrorShown","timer","App","errorObject","Provider","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.008b9a3f.chunk.js","sourcesContent":["import { FC, FormEvent } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  onEditSubmit: (\n    event: FormEvent<HTMLFormElement>,\n    todoId: number,\n    todoCompleted: boolean) => void,\n  todo: Todo,\n  inputValue: string,\n  setInputValue: React.Dispatch<React.SetStateAction<string>>,\n  inputRef: React.MutableRefObject<HTMLInputElement | null>,\n  setIsTodoEditing: React.Dispatch<React.SetStateAction<boolean>>,\n  onKeyDownHandler: (event: React.KeyboardEvent<HTMLInputElement>) => void,\n};\n\nexport const EditForm: FC<Props> = ({\n  onEditSubmit,\n  todo,\n  inputValue,\n  setInputValue,\n  inputRef,\n  setIsTodoEditing,\n  onKeyDownHandler,\n}) => {\n  return (\n    <form\n      onSubmit={(event) => onEditSubmit(\n        event,\n        todo.id,\n        todo.completed,\n      )}\n      className=\"todo__title-form\"\n    >\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={(event) => setInputValue(event.target.value)}\n        ref={inputRef}\n        onBlur={() => setIsTodoEditing(false)}\n        onKeyDown={onKeyDownHandler}\n        className=\"todo__input\"\n      />\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport React, {\n  FC, FormEvent, useEffect, useRef, useState,\n} from 'react';\nimport { Todo } from '../../types/Todo';\nimport { EditForm } from './EditForm';\n\ntype Props = {\n  isCurrentClicked: boolean,\n  todo: Todo,\n  visibleTodos: Todo[],\n  setVisibleTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  clickedIndex: number,\n  setClickedIndex: React.Dispatch<React.SetStateAction<number>>\n  index: number,\n  todos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n};\n\nexport const TodoComponent: FC<Props> = ({\n  isCurrentClicked,\n  todo,\n  todos,\n  visibleTodos,\n  setVisibleTodos,\n  clickedIndex,\n  setClickedIndex,\n  index,\n  setTodos,\n}) => {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const [isTodoEditing, setIsTodoEditing] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const {\n    title,\n    completed,\n    id,\n  } = todo;\n\n  function updateCompletedStatus(\n    prev: Todo[],\n    todoId: number,\n  ) {\n    const updatedArray = prev.map(el => {\n      const currentTodo = el;\n\n      if (todoId === el.id) {\n        currentTodo.completed = !el.completed;\n      }\n\n      return currentTodo;\n    });\n\n    return updatedArray;\n  }\n\n  const handleToggleTodo = (todoId: number) => {\n    const clickedTodo = visibleTodos.find(x => x.id === todoId);\n\n    if (clickedTodo) {\n      setTodos(updateCompletedStatus(todos, todoId));\n    }\n  };\n\n  const onKeyDownHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.nativeEvent.key === 'Escape') {\n      inputRef.current?.blur();\n    }\n  };\n\n  const deleteTodoHandler = (todoId: number) => {\n    setVisibleTodos(prev => {\n      return prev.filter(el => el.id !== todoId);\n    });\n\n    setTodos(prev => {\n      return prev.filter(el => el.id !== todoId);\n    });\n  };\n\n  const onDoubleClick = (i: number) => {\n    setIsTodoEditing(true);\n    setClickedIndex(i);\n  };\n\n  const onEditSubmit = (\n    event: FormEvent<HTMLFormElement>,\n    todoId: number,\n    todoCompleted: boolean,\n  ) => {\n    event.preventDefault();\n\n    const clickedTodoTitle = visibleTodos.find(currentTodo => {\n      return currentTodo.id === todoId;\n    })?.title;\n\n    if (inputRef.current?.value.length === 0) {\n      setTodos((prev: Todo[]) => {\n        return prev.filter(el => el.id !== todoId);\n      });\n\n      return;\n    }\n\n    if (inputValue === clickedTodoTitle) {\n      inputRef.current?.blur();\n\n      return;\n    }\n\n    if (inputRef.current) {\n      setTodos((prev: Todo[]) => {\n        return prev.map(el => {\n          const currentTodo = el;\n\n          if (el.id === todoId && inputRef.current) {\n            currentTodo.title = inputRef.current.value.trim();\n            currentTodo.completed = todoCompleted;\n          }\n\n          return currentTodo;\n        });\n      });\n    }\n  };\n\n  const onToggleTodo = () => {\n    setClickedIndex(index);\n    handleToggleTodo(id);\n  };\n\n  const onDeleteTodo = () => {\n    setClickedIndex(index);\n    deleteTodoHandler(id);\n  };\n\n  let focusTimeout: ReturnType<typeof setTimeout>;\n\n  const handleDoubleClick = () => {\n    onDoubleClick(index);\n    setInputValue(title);\n    setIsTodoEditing(true);\n\n    focusTimeout = setTimeout(() => {\n      if (inputRef) {\n        inputRef.current?.focus();\n      }\n    }, 0);\n  };\n\n  useEffect(() => {\n    return () => clearTimeout(focusTimeout);\n  }, []);\n\n  return (\n    <li\n      data-cy=\"Todo\"\n      className={classNames(\n        'todo',\n        { completed },\n      )}\n      onDoubleClick={handleDoubleClick}\n    >\n      {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n      <label className={classNames(\n        'todo__status-label',\n        { hidden: isTodoEditing && isCurrentClicked },\n      )}\n      >\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          defaultChecked\n          onClick={onToggleTodo}\n        />\n      </label>\n\n      {isTodoEditing && index === clickedIndex ? (\n        <EditForm\n          onEditSubmit={onEditSubmit}\n          todo={todo}\n          inputValue={inputValue}\n          setInputValue={setInputValue}\n          inputRef={inputRef}\n          setIsTodoEditing={setIsTodoEditing}\n          onKeyDownHandler={onKeyDownHandler}\n        />\n      ) : (\n        <span data-cy=\"TodoTitle\" className=\"todo__title\">\n          {title}\n        </span>\n      )}\n\n      <button\n        type=\"button\"\n        className={classNames(\n          'todo__remove',\n          { hidden: isTodoEditing && index === clickedIndex },\n        )}\n        data-cy=\"TodoDeleteButton\"\n        onClick={onDeleteTodo}\n      >\n        ×\n      </button>\n    </li>\n  );\n};\n","import { FC } from 'react';\nimport { Todo } from '../types/Todo';\nimport { generateKey } from '../utils/generateKey';\nimport { TodoComponent } from './Todo/Todo';\n\ntype Props = {\n  setVisibleTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  setClickedIndex: React.Dispatch<React.SetStateAction<number>>,\n  clickedIndex: number,\n  visibleTodos: Todo[],\n  todos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n};\n\nexport const TodoList: FC<Props> = ({\n  setVisibleTodos,\n  clickedIndex,\n  setClickedIndex,\n  visibleTodos,\n  todos,\n  setTodos,\n}) => {\n  return (\n    <ul className=\"todoapp__main\" data-cy=\"TodoList\">\n      {visibleTodos.map((todo: Todo, index: number) => (\n        <TodoComponent\n          key={generateKey(todo.id, index)}\n          isCurrentClicked={index === clickedIndex}\n          visibleTodos={visibleTodos}\n          setVisibleTodos={setVisibleTodos}\n          clickedIndex={clickedIndex}\n          setClickedIndex={setClickedIndex}\n          todos={todos}\n          todo={todo}\n          index={index}\n          setTodos={setTodos}\n        />\n      ))}\n    </ul>\n  );\n};\n","export function generateKey(pre: number, index: number) {\n  return `${pre + index}_${new Date().getTime()}`;\n}\n","export const FilterStatus = {\n  ALL: 'all',\n  ACTIVE: 'active',\n  COMPLETED: 'completed',\n};\n","import classNames from 'classnames';\nimport { useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { FilterStatus } from '../types/FilterStatus';\nimport { Todo } from '../types/Todo';\nimport { getSearchWith } from '../utils/getSearchWith';\n\ntype Props = {\n  visibleTodos: Todo[],\n  todos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n};\n\nexport const Footer = ({\n  todos,\n  setTodos,\n  visibleTodos,\n}: Props) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const completedTodos = visibleTodos.filter(todo => todo.completed);\n  const itemsLeft = todos.filter((todo: Todo) => !todo.completed).length;\n\n  const filterType = useMemo(() => {\n    return searchParams.get('filter') || FilterStatus.ALL;\n  }, [searchParams]);\n\n  const clearCompletedHandler = () => {\n    setTodos(todos.filter(el => !el.completed));\n  };\n\n  const handleOnClick = (type: string) => {\n    setSearchParams(\n      getSearchWith(searchParams, {\n        filter: type,\n      }),\n    );\n  };\n\n  return (\n    <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${itemsLeft} items left`}\n      </span>\n\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <button\n          type=\"button\"\n          data-cy=\"FilterLinkAll\"\n          className={classNames('filter__link', {\n            selected: filterType === FilterStatus.ALL,\n          })}\n          onClick={() => handleOnClick(FilterStatus.ALL)}\n        >\n          All\n        </button>\n\n        <button\n          type=\"button\"\n          data-cy=\"FilterLinkActive\"\n          className={classNames('filter__link', {\n            selected: filterType === FilterStatus.ACTIVE,\n          })}\n          onClick={() => handleOnClick(FilterStatus.ACTIVE)}\n        >\n          Active\n        </button>\n        <button\n          type=\"button\"\n          data-cy=\"FilterLinkCompleted\"\n          className={classNames('filter__link', {\n            selected: filterType === FilterStatus.COMPLETED,\n          })}\n          onClick={() => handleOnClick(FilterStatus.COMPLETED)}\n        >\n          Completed\n        </button>\n      </nav>\n\n      <button\n        data-cy=\"ClearCompletedButton\"\n        type=\"button\"\n        className={classNames(\n          'todoapp__clear-completed',\n          { hidden: completedTodos.length === 0 },\n        )}\n        onClick={clearCompletedHandler}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","type SearchParams = {\n  [key: string]: string | null,\n};\n\nexport const getSearchWith = (\n  currentSearchParams: URLSearchParams,\n  params: SearchParams,\n) => {\n  const arrayOfPairs = Object.entries(params);\n\n  arrayOfPairs.forEach(([key, value]) => {\n    if (value === null) {\n      currentSearchParams.delete(key);\n    } else {\n      currentSearchParams.set(key, value);\n    }\n  });\n\n  return currentSearchParams.toString();\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  visibleTodos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n};\n\nexport const ToggleAllButton: FC<Props> = ({\n  visibleTodos,\n  setTodos,\n}) => {\n  const isToggleAllActive = visibleTodos.every(x => x.completed);\n\n  const handleToggleAll = () => {\n    setTodos((prev: Todo[]) => {\n      return prev.map(el => {\n        const currentTodo = el;\n\n        currentTodo.completed = !isToggleAllActive;\n\n        return currentTodo;\n      });\n    });\n  };\n\n  return (\n    <button\n      aria-label=\"toggle\"\n      data-cy=\"ToggleAllButton\"\n      type=\"button\"\n      className={classNames(\n        'todoapp__toggle-all',\n        { active: isToggleAllActive },\n      )}\n      onClick={handleToggleAll}\n    />\n  );\n};\n","import React, { createContext } from 'react';\n\ntype Context = {\n  setIsEmptyTitleErrorShown: React.Dispatch<React.SetStateAction<boolean>>,\n  isEmptyTitleErrorShown: boolean,\n};\n\nexport const ErrorContext = createContext<Context>({\n  isEmptyTitleErrorShown: false,\n  setIsEmptyTitleErrorShown: (): void => {},\n});\n","import { useSearchParams } from 'react-router-dom';\nimport {\n  FormEvent, useContext, useEffect, useMemo, useRef, useState,\n} from 'react';\nimport { TodoList } from './TodoList';\nimport { Footer } from './Footer';\nimport { Todo } from '../types/Todo';\nimport { ToggleAllButton } from './ToggleAllButton';\nimport { ErrorContext } from '../context/ErrorContext';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { FilterStatus } from '../types/FilterStatus';\n\nexport const TodoContent = () => {\n  const [searchParams] = useSearchParams();\n  const [todos, setTodos] = useLocalStorage('todos', '[]');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const { setIsEmptyTitleErrorShown } = useContext(ErrorContext);\n\n  const newTodoField = useRef<HTMLInputElement>(null);\n  const [clickedIndex, setClickedIndex] = useState(-1);\n\n  useEffect(() => {\n    setVisibleTodos(todos);\n\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, []);\n\n  function onSubmitHandler(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    setClickedIndex(visibleTodos.length);\n    const inputValue = newTodoField?.current?.value.trim();\n\n    if (!inputValue?.length) {\n      setIsEmptyTitleErrorShown(true);\n\n      return;\n    }\n\n    const lastTodoId = todos[todos.length - 1]?.id;\n\n    const newTodoObj = {\n      title: newTodoField.current?.value.trim() || '',\n      completed: false,\n      id: lastTodoId + 1 || 0,\n    };\n\n    setTodos((prev: Todo[]) => [...prev, newTodoObj]);\n\n    if (newTodoField.current) {\n      newTodoField.current.value = '';\n    }\n  }\n\n  const filterType = useMemo(() => {\n    return searchParams.get('filter') || FilterStatus.ALL;\n  }, [searchParams]);\n\n  useEffect(() => {\n    switch (filterType) {\n      case FilterStatus.ALL:\n        setVisibleTodos(todos);\n\n        break;\n\n      case FilterStatus.COMPLETED:\n        setVisibleTodos(todos.filter((todo: Todo) => todo.completed));\n        break;\n\n      case FilterStatus.ACTIVE:\n        setVisibleTodos(todos.filter((todo: Todo) => !todo.completed));\n        break;\n\n      default:\n        throw new Error('Wrong Type');\n    }\n  }, [filterType, todos]);\n\n  return (\n    <div className=\"todoapp__content\">\n      <header className=\"todoapp__header\">\n        {!!visibleTodos.length && (\n          <ToggleAllButton\n            setTodos={setTodos}\n            visibleTodos={visibleTodos}\n          />\n        )}\n\n        <form\n          onSubmit={onSubmitHandler}\n        >\n          <input\n            data-cy=\"NewTodoField\"\n            type=\"text\"\n            ref={newTodoField}\n            className=\"todoapp__new-todo\"\n            placeholder=\"What needs to be done?\"\n          />\n        </form>\n      </header>\n\n      <TodoList\n        visibleTodos={visibleTodos}\n        setVisibleTodos={setVisibleTodos}\n        clickedIndex={clickedIndex}\n        setClickedIndex={setClickedIndex}\n        setTodos={setTodos}\n        todos={todos}\n      />\n\n      {!!todos.length && (\n        <Footer\n          visibleTodos={visibleTodos}\n          todos={todos}\n          setTodos={setTodos}\n        />\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Todo } from '../types/Todo';\n\ntype InitValue = string;\n\nexport function useLocalStorage(\n  key: string,\n  initialValue: InitValue,\n) {\n  const [storedValue, setStoredValue] = useState(() => {\n    if (typeof window === 'undefined') {\n      return JSON.parse(initialValue);\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : JSON.parse(initialValue);\n    } catch (error) {\n      return JSON.parse(initialValue);\n    }\n  });\n\n  const setValue = (value: Todo[]) => {\n    const valueToStore\n      = value instanceof Function ? value(storedValue) : value;\n\n    setStoredValue(valueToStore);\n\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import classNames from 'classnames';\nimport { useContext, useEffect, useState } from 'react';\nimport { ErrorContext } from '../context/ErrorContext';\n\nexport const ErrorNotification = () => {\n  const {\n    isEmptyTitleErrorShown,\n    setIsEmptyTitleErrorShown,\n  } = useContext(ErrorContext);\n\n  const [isClosePressed, setIsClosePressed] = useState(false);\n\n  const hideErrorHandler = () => {\n    setIsClosePressed(true);\n    setIsEmptyTitleErrorShown(false);\n    setIsClosePressed(false);\n  };\n\n  const isErrorShown = !isClosePressed && isEmptyTitleErrorShown;\n\n  useEffect(() => {\n    const setErrors = () => {\n      setIsEmptyTitleErrorShown(false);\n      setIsClosePressed(false);\n    };\n\n    const timer = setTimeout(setErrors, 3000);\n\n    return () => clearTimeout(timer);\n  }, [\n    isEmptyTitleErrorShown,\n  ]);\n\n  return (\n    <>\n      {isErrorShown && (\n        <div\n          data-cy=\"ErrorNotification\"\n          className={classNames(\n            'notification',\n            'is-danger',\n            'is-light',\n            'has-text-weight-normal',\n          )}\n        >\n          <button\n            aria-label=\"delete\"\n            type=\"button\"\n            data-cy=\"HideErrorButton\"\n            className=\"delete\"\n            onClick={hideErrorHandler}\n          />\n          Title can`t be empty\n          <br />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { TodoContent } from './components/TodoContent';\nimport { ErrorNotification } from './components/ErrorNotification';\nimport { ErrorContext } from './context/ErrorContext';\n\nexport const App: React.FC = () => {\n  const [isEmptyTitleErrorShown, setIsEmptyTitleErrorShown] = useState(false);\n\n  const errorObject = {\n    isEmptyTitleErrorShown,\n    setIsEmptyTitleErrorShown,\n  };\n\n  return (\n    <ErrorContext.Provider\n      value={errorObject}\n    >\n      <div className=\"todoapp\">\n        <h1 className=\"todoapp__title\">todos</h1>\n        <TodoContent />\n        <ErrorNotification />\n      </div>\n    </ErrorContext.Provider>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nconst Root = () => (\n  <HashRouter>\n    <App />\n  </HashRouter>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}